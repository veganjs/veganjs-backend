openapi: 3.0.0
paths:
  /api/categories:
    get:
      operationId: CategoryController_getAllCategories
      summary: Get many category items
      parameters: []
      responses:
        "200":
          description: Category list has been fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
      tags:
        &a1
        - categories
    post:
      operationId: CategoryController_createCategory
      summary: Create new category
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryDto"
      responses:
        "201":
          description: Category has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDto"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Category already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a1
      security:
        - cookie: []
  "/api/categories/{id}":
    get:
      operationId: CategoryController_getCategoryById
      summary: Get category by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Category has been fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDto"
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a1
    put:
      operationId: CategoryController_updateCategory
      summary: Update category by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCategoryDto"
      responses:
        "200":
          description: Category has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDto"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Category already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a1
      security:
        - cookie: []
    delete:
      operationId: CategoryController_deleteCategory
      summary: Delete category by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Category has been deleted
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a1
      security:
        - cookie: []
  /api/auth/login:
    post:
      operationId: AuthController_login
      summary: Sign in
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCredentialsDto"
      responses:
        "204":
          description: Successfully logged in
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        &a2
        - auth
  /api/auth/signup:
    post:
      operationId: AuthController_signUp
      summary: Create new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpCredentialsDto"
      responses:
        "201":
          description: User has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a2
  /api/auth/refresh:
    get:
      operationId: AuthController_refresh
      summary: Refresh access token
      parameters: []
      responses:
        "204":
          description: Access token has been refreshed
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a2
      security:
        - cookie: []
  /api/auth/logout:
    get:
      operationId: AuthController_logout
      summary: Log out
      parameters: []
      responses:
        "204":
          description: Successfully logged out
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a2
      security:
        - cookie: []
  /api/ingredients:
    get:
      operationId: IngredientController_getAllIngredients
      summary: Get many ingredient items
      parameters:
        - name: search
          required: false
          in: query
          description: Search query
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: Sort order
          schema:
            default: ASC
            enum:
              &a4
              - ASC
              - DESC
            type: string
        - name: page
          required: false
          in: query
          description: Current page
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Records per page
          schema:
            minimum: 1
            default: 20
            type: number
      responses:
        "200":
          description: Ingredient list has been fetched
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Paginated"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/IngredientDto"
      tags:
        &a3
        - ingredients
    post:
      operationId: IngredientController_createIngredient
      summary: Create new ingredient
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIngredientDto"
      responses:
        "201":
          description: Ingredient has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientDto"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Ingredient already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a3
      security:
        - cookie: []
  "/api/ingredients/{id}":
    get:
      operationId: IngredientController_getIngredientById
      summary: Get ingredient by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Ingredient has been fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientDto"
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Ingredient not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a3
    put:
      operationId: IngredientController_updateIngredient
      summary: Update ingredient by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIngredientDto"
      responses:
        "200":
          description: Ingredient has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientDto"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Ingredient not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Ingredient already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a3
      security:
        - cookie: []
    delete:
      operationId: IngredientController_deleteIngredient
      summary: Delete ingredient by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Ingredient has been deleted
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Ingredient not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a3
      security:
        - cookie: []
  /api/recipes:
    get:
      operationId: RecipeController_searchRecipes
      summary: Search recipe items
      parameters:
        - name: search
          required: false
          in: query
          description: Search query
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: Sort order
          schema:
            default: ASC
            enum: *a4
            type: string
        - name: page
          required: false
          in: query
          description: Current page
          schema:
            minimum: 1
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Records per page
          schema:
            minimum: 1
            default: 20
            type: number
      responses:
        "200":
          description: Recipe search results
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Paginated"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/RecipeDto"
      tags:
        &a5
        - recipes
    post:
      operationId: RecipeController_createRecipe
      summary: Create new recipe
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRecipeDto"
      responses:
        "201":
          description: Recipe has been created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDto"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Ingredients not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a5
      security:
        - cookie: []
  "/api/recipes/{id}":
    get:
      operationId: RecipeController_getRecipeById
      summary: Get recipe by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Recipe has been fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDto"
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a5
    delete:
      operationId: RecipeController_deleteRecipe
      summary: Delete recipe by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Recipe has been deleted
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a5
      security:
        - cookie: []
  "/api/users/{username}":
    get:
      operationId: UserController_getUserByUsername
      summary: Get user by username
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: User has been fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags:
        &a6
        - users
  /api/users/me:
    get:
      operationId: UserController_getMe
      summary: Get current user
      parameters: []
      responses:
        "200":
          description: Current user has been fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a6
      security:
        - cookie: []
  /api/users/profile:
    patch:
      operationId: UserController_updateProfile
      summary: Update user profile
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileDto"
      responses:
        "200":
          description: User profile has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Invalid body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a6
      security:
        - cookie: []
  /api/users/change-password:
    put:
      operationId: UserController_updatePassword
      summary: Update user password
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        "204":
          description: User password has been updated
        "400":
          description: Invalid body or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a6
      security:
        - cookie: []
  /api/users/avatar:
    post:
      operationId: UserController_uploadAvatar
      summary: Upload user avatar
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "204":
          description: User avatar has been uploaded
        "400":
          description: Invalid content-type or no file provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "415":
          description: Invalid mimetype
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      tags: *a6
      security:
        - cookie: []
info:
  title: Veganjs cookbook API
  description: ""
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    cookie:
      type: apiKey
      in: cookie
      name: connect.sid
  schemas:
    CategoryDto:
      type: object
      properties:
        id:
          type: string
          description: Category id
          format: uuid
        name:
          type: string
          description: Category name
          enum:
            - Завтраки
            - Ланчи
            - Закуски
            - Салаты
            - Супы
            - Десерты
            - Выпечка
            - Смузи
      required:
        - id
        - name
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: number
          description: Response status code
          example: 400
        timestamp:
          type: string
          description: Request timestamp
          format: date-time
        path:
          type: string
          description: Request URL
          example: /api/auth/login
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
          example: POST
          description: Request method
        message:
          description: Error message(-s)
          example: password is too weak
          oneOf:
            - type: string
            - type: array
              items:
                type: string
      required:
        - statusCode
        - timestamp
        - path
        - method
        - message
    CreateCategoryDto:
      type: object
      properties:
        name:
          type: string
          description: Category name
          enum:
            &a7
            - Завтраки
            - Ланчи
            - Закуски
            - Салаты
            - Супы
            - Десерты
            - Выпечка
            - Смузи
      required:
        - name
    UpdateCategoryDto:
      type: object
      properties:
        name:
          type: string
          description: Category name
          enum: *a7
      required:
        - name
    LoginCredentialsDto:
      type: object
      properties:
        username:
          type: string
          description: User name
        password:
          type: string
          description: User password
      required:
        - username
        - password
    SignUpCredentialsDto:
      type: object
      properties:
        username:
          type: string
          description: User name
        password:
          type: string
          description: User password
      required:
        - username
        - password
    UserDto:
      type: object
      properties:
        username:
          type: string
          description: User name
        avatar:
          type: string
          description: User avatar
        createdAt:
          type: string
          description: User account creation date
          format: date-time
      required:
        - username
        - createdAt
    PaginationMeta:
      type: object
      properties:
        page:
          type: number
          minimum: 1
          default: 1
          description: Current page
        limit:
          type: number
          minimum: 1
          default: 20
          description: Records per page
        totalCount:
          type: number
          description: Total records count
        pagesCount:
          type: number
          description: Total pages count
        hasPreviousPage:
          type: boolean
          description: Whether current entity has a previous page to be shown
        hasNextPage:
          type: boolean
          description: Whether current entity has a next page to be shown
      required:
        - page
        - limit
        - totalCount
        - pagesCount
        - hasPreviousPage
        - hasNextPage
    Paginated:
      type: object
      properties:
        data:
          description: Paginated data
          type: array
          items:
            type: array
        meta:
          $ref: "#/components/schemas/PaginationMeta"
      required:
        - data
        - meta
    IngredientDto:
      type: object
      properties:
        id:
          type: string
          description: Ingredient id
          format: uuid
        name:
          type: string
          description: Ingredient name
      required:
        - id
        - name
    CreateIngredientDto:
      type: object
      properties:
        name:
          type: string
          description: Ingredient name
      required:
        - name
    UpdateIngredientDto:
      type: object
      properties:
        name:
          type: string
          description: Ingredient name
      required:
        - name
    RecipeIngredientDto:
      type: object
      properties:
        id:
          type: string
          description: Recipe ingredient id
          format: uuid
        amount:
          type: number
          minimum: 1
          description: Quantity of certain ingredient needed for recipe
        unit:
          type: string
          enum:
            - ml
            - l
            - g
            - kg
            - tsp
            - tbsp
            - cup
            - piece
            - pack
          description: Recipe ingredient measure unit
        ingredient:
          $ref: "#/components/schemas/IngredientDto"
      required:
        - id
        - amount
        - ingredient
    StepDto:
      type: object
      properties:
        id:
          type: string
          description: Step id
          format: uuid
        order:
          type: number
          description: Step order number
        description:
          type: string
          description: Step description
      required:
        - id
        - order
        - description
    RecipeDto:
      type: object
      properties:
        title:
          type: string
          description: Recipe title
        description:
          type: string
          description: Recipe description
        servings:
          type: number
          minimum: 1
          description: Number of servings a recipe will make
        source:
          type: string
          description: Recipe original source
        id:
          type: string
          format: uuid
          description: Recipe id
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/RecipeIngredientDto"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/StepDto"
        category:
          $ref: "#/components/schemas/CategoryDto"
        author:
          $ref: "#/components/schemas/UserDto"
        createdAt:
          type: string
          description: Recipe creation date
          format: date-time
        updatedAt:
          type: string
          description: Recipe updation date
          format: date-time
      required:
        - title
        - description
        - servings
        - id
        - ingredients
        - steps
        - category
        - author
        - createdAt
        - updatedAt
    CreateRecipeIngredientDto:
      type: object
      properties:
        id:
          type: string
          description: Recipe ingredient id
          format: uuid
        amount:
          type: number
          minimum: 1
          description: Quantity of certain ingredient needed for recipe
        unit:
          type: string
          enum:
            - ml
            - l
            - g
            - kg
            - tsp
            - tbsp
            - cup
            - piece
            - pack
          description: Recipe ingredient measure unit
      required:
        - id
        - amount
    CreateStepDto:
      type: object
      properties:
        description:
          type: string
          description: Step description
      required:
        - description
    CreateRecipeDto:
      type: object
      properties:
        title:
          type: string
          description: Recipe title
        description:
          type: string
          description: Recipe description
        servings:
          type: number
          minimum: 1
          description: Number of servings a recipe will make
        source:
          type: string
          description: Recipe original source
        categoryId:
          type: string
          description: Category id
          format: uuid
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/CreateRecipeIngredientDto"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/CreateStepDto"
      required:
        - title
        - description
        - servings
        - categoryId
        - ingredients
        - steps
    UpdateProfileDto:
      type: object
      properties:
        username:
          type: string
          description: User name
      required:
        - username
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: Old password
        newPassword:
          type: string
          description: New password
      required:
        - oldPassword
        - newPassword
